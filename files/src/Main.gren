module Main exposing ( main )

import Browser
import File exposing ( File )
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Json.Decode as D



-- MAIN


main =
    Browser.element
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        }



-- MODEL


type alias Model =
    Array File


init :
    {}
    -> { model : Model
       , command : Cmd Msg
       }
init _ =
    { model = []
    , command = Cmd.none
    }



-- UPDATE


type Msg
    = GotFiles (Array File)


update msg model =
    case msg of
        GotFiles files ->
            { model = files
            , command = Cmd.none
            }



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.none



-- VIEW


view : Model -> Html Msg
view model =
    div
        []
        [ input
            [ type_ "file"
            , multiple True
            , on "change" (D.map GotFiles filesDecoder)
            ]
            []
        , div
            [ id "file-view"
            ]
            [ text (Debug.toString model)
            ]
        ]


filesDecoder : D.Decoder (Array File)
filesDecoder =
    D.at
        [ "target"
        , "files"
        ]
        (D.array File.decoder)
