module Main exposing ( main )

import Browser
import Html exposing ( Html )
import Html.Attributes as Attributes
import Html.Events as Events
import LocalStorage
import Task
import WebStorage



-- MAIN


main =
    Browser.element
        { init = init
        , view = view
        , update = update
        , subscriptions = \_ -> Sub.none
        }



-- MODEL


type alias Model =
    { inputKey : String
    , inputValue : String
    , message : String
    , keys : Array String
    }


init :
    {}
    -> { model : Model
       , command : Cmd Msg
       }
init _ =
    { model =
        { inputKey = ""
        , inputValue = ""
        , message = ""
        , keys = []
        }
    , command = refreshContent
    }


refreshContent : Cmd Msg
refreshContent =
    LocalStorage.length
        |> Task.andThen
                (\length ->
                    Array.initialize length 0 identity
                        |> Array.map LocalStorage.keyAtIndex
                        |> Task.sequence
                        |> Task.mapError (always WebStorage.AccessError)
                )
        |> Task.attempt ShowContents



-- UPDATE


type Msg
    = SetKey Key
    | SetValue Value
    | SaveToLocalStorage Key Value
    | SavedToLocalStorage (Result WebStorage.WriteError {})
    | ClearLocalStorage
    | ClearedLocalStorage (Result WebStorage.AccessError {})
    | GetFromLocalStorage Key
    | GotFromLocalStorage Key (Result WebStorage.ReadError Value)
    | RemoveFromLocalStorage Key
    | RemovedFromLocalStorage Key (Result WebStorage.AccessError {})
    | ShowContents (Result WebStorage.AccessError (Array String))


type alias Key =
    String


type alias Value =
    String


type alias Error =
    String


update :
    Msg
    -> Model
    -> { model : Model
       , command : Cmd Msg
       }
update msg model =
    case msg of
        SetKey key ->
            { model = { model | inputKey = key }
            , command = Cmd.none
            }

        SetValue value ->
            { model = { model | inputValue = value }
            , command = Cmd.none
            }

        SaveToLocalStorage key value ->
            { model = model
            , command =
                LocalStorage.set key value
                    |> Task.attempt SavedToLocalStorage
            }

        SavedToLocalStorage (Ok {}) ->
            { model =
                { model
                    | inputKey = ""
                    , inputValue = ""
                    , message = "Saved <" ++ model.inputKey ++ ", " ++ model.inputValue ++ "> to localstorage"
                }
            , command = refreshContent
            }

        SavedToLocalStorage (Err WebStorage.QuotaExceeded) ->
            { model = { model | message = "Couldn\'t write to local storage as we\'ve used our quota" }
            , command = Cmd.none
            }

        SavedToLocalStorage (Err WebStorage.WriteBlocked) ->
            { model = { model | message = "Failed to write to localstorage" }
            , command = Cmd.none
            }

        ClearLocalStorage ->
            { model = model
            , command =
                LocalStorage.clear
                    |> Task.attempt ClearedLocalStorage
            }

        ClearedLocalStorage (Ok {}) ->
            { model = { model | message = "Successfully cleared localstorage" }
            , command = refreshContent
            }

        ClearedLocalStorage (Err err) ->
            { model = { model | message = "Failed to clear localstorage" }
            , command = Cmd.none
            }

        GetFromLocalStorage key ->
            { model =
                { model
                    | inputKey = ""
                    , inputValue = ""
                }
            , command =
                LocalStorage.get key
                    |> Task.attempt (GotFromLocalStorage key)
            }

        GotFromLocalStorage key (Ok value) ->
            { model = { model | message = "Got <" ++ key ++ ", " ++ value ++ "> from localstorage." }
            , command = refreshContent
            }

        GotFromLocalStorage key (Err WebStorage.NoValue) ->
            { model = { model | message = "Found no items with key \"" ++ key ++ "\"" }
            , command = Cmd.none
            }

        GotFromLocalStorage _ (Err WebStorage.ReadBlocked) ->
            { model = { model | message = "Failed to read from localstorage" }
            , command = Cmd.none
            }

        RemoveFromLocalStorage key ->
            { model =
                { model
                    | inputKey = ""
                    , inputValue = ""
                }
            , command =
                LocalStorage.remove key
                    |> Task.attempt (RemovedFromLocalStorage key)
            }

        RemovedFromLocalStorage key (Ok {}) ->
            { model = { model | message = "Removed item  with key \"" ++ key ++ "\" from localstorage." }
            , command = refreshContent
            }

        RemovedFromLocalStorage key (Err err) ->
            { model = { model | message = "Failed to remove item with key \"" ++ key ++ "\" from localstorage" }
            , command = Cmd.none
            }

        ShowContents (Ok keys) ->
            { model = { model | keys = keys }
            , command = Cmd.none
            }

        ShowContents (Err WebStorage.AccessError) ->
            { model = { model | message = "Failed to retrieve contents of local storage:" }
            , command = Cmd.none
            }



-- VIEW


view : Model -> Html Msg
view model =
    Html.div
        []
        [ Html.div
            []
            [ Html.input
                [ Attributes.placeholder "Key:"
                , Attributes.value model.inputKey
                , Events.onInput SetKey
                ]
                []
            , Html.input
                [ Attributes.placeholder "Value:"
                , Attributes.value model.inputValue
                , Events.onInput SetValue
                ]
                []
            , Html.button
                [ Attributes.type_ "button"
                , Events.onClick
                    <| SaveToLocalStorage model.inputKey model.inputValue
                ]
                [ Html.text "ðŸ’¾ Save"
                ]
            , Html.button
                [ Attributes.type_ "button"
                , Events.onClick
                    <| GetFromLocalStorage model.inputKey
                ]
                [ Html.text "ðŸ”Ž Get"
                ]
            , Html.button
                [ Attributes.type_ "button"
                , Events.onClick
                    <| RemoveFromLocalStorage model.inputKey
                ]
                [ Html.text "ðŸ—‘ Remove"
                ]
            , Html.button
                [ Attributes.type_ "button"
                , Events.onClick ClearLocalStorage
                ]
                [ Html.text "ðŸ§¹ Clear"
                ]
            ]
        , Html.div
            []
            [ Html.p
                []
                [ Html.text model.message
                ]
            ]
        , Html.div
            []
            [ Html.p
                []
                [ Html.text
                    <| "There are currently "
                    ++ String.fromInt (Array.length model.keys)
                    ++ " keys in local storage:"
                ]
            ]
        , Html.ul [] (Array.map viewKey model.keys)
        ]


viewKey : String -> Html msg
viewKey key =
    Html.li
        []
        [ Html.text key
        ]
