module Main exposing (main)

import Browser
import Html exposing (Html)
import Html.Events as Events
import Html.Attributes as Attributes
import LocalStorage
import Task


-- MAIN


main =
    Browser.element
        { init = \Unit -> init
        , view = view
        , update = update
        , subscriptions = \_ -> Sub.none
        }


-- MODEL


type alias Model =
    { inputKey : String
    , inputValue : String
    , message : String
    }


init : { model : Model, command : Cmd Msg }
init =
    { model =
        { inputKey = ""
        , inputValue = ""
        , message = ""
        }
    , command = Cmd.none
    }


-- UPDATE


type Msg
  = NoOp
  | SetKey Key
  | SetValue Value
  | SaveToLocalStorage Key Value
  | SavedToLocalStorage (Result Error Unit)
  | ClearLocalStorage
  | ClearedLocalStorage (Result Error Unit)
  | GetFromLocalStorage Key
  | GotFromLocalStorage Key (Result Error (Maybe Value))
  | RemoveFromLocalStorage Key
  | RemovedFromLocalStorage Key (Result Error Unit)




type alias Key = String


type alias Value = String


type alias Error = String


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
  case msg of
    NoOp ->
        { model = model
        , command = Cmd.none
        }

    SetKey key ->
        { model = { model | inputKey = key }
        , command = Cmd.none
        }

    SetValue value ->
        { model = { model | inputValue = value }
        , command = Cmd.none
        }

    SaveToLocalStorage key value ->
        { model = model
        , command =
            LocalStorage.set key value
                |> Task.attempt SavedToLocalStorage
        }

    SavedToLocalStorage (Ok Unit) ->
        { model =
            { inputKey = ""
            , inputValue = ""
            , message = "Saved <" ++ model.inputKey ++ ", " ++ model.inputValue ++ "> to localstorage"
            }
        , command = Cmd.none
        }

    SavedToLocalStorage (Err err) ->
        { model = { model | message = "Failed to save to localstorage: " ++ err }
        , command = Cmd.none
        }

    ClearLocalStorage ->
        { model = model
        , command =
            LocalStorage.clear
                |> Task.attempt ClearedLocalStorage
        }

    ClearedLocalStorage (Ok Unit) ->
        { model = { model | message = "Successfully cleared localstorage" }
        , command = Cmd.none
        }

    ClearedLocalStorage (Err err) ->
        { model = { model | message = "Failed to clear localstorage: " ++ err }
        , command = Cmd.none
        }

    GetFromLocalStorage key ->
        { model = { model | inputKey = "", inputValue = "" }
        , command =
            LocalStorage.get key
                |> Task.attempt (GotFromLocalStorage key)
        }

    GotFromLocalStorage key (Ok (Just value)) ->
        { model = { model | message = "Got <" ++ key ++ ", " ++ value ++ "> from localstorage." }
        , command = Cmd.none
        }

    GotFromLocalStorage key (Ok Nothing) ->
        { model = { model | message = "Found no items with key \"" ++ key ++ "\"" }
        , command = Cmd.none
        }

    GotFromLocalStorage _ (Err err) ->
        { model = { model | message = "Failed to get from localstorage: " ++ err }
        , command = Cmd.none
        }

    RemoveFromLocalStorage key ->
        { model = { model | inputKey = "", inputValue = "" }
        , command =
            LocalStorage.remove key
                |> Task.attempt (RemovedFromLocalStorage key)
        }

    RemovedFromLocalStorage key (Ok Unit) ->
        { model = { model | message = "Removed item  with key \"" ++ key ++ "\" from localstorage." }
        , command = Cmd.none
        }

    RemovedFromLocalStorage key (Err err) ->
        { model = { model | message = "Failed to remove item with key \"" ++ key ++ "\" from localstorage: " ++ err }
        , command = Cmd.none
        }

-- VIEW


view : Model -> Html Msg
view model =
    Html.div []
        [ Html.div []
            [ Html.input
                [ Attributes.placeholder "Key:"
                , Attributes.value model.inputKey
                , Events.onInput SetKey
                ]
                []
            , Html.input
                [ Attributes.placeholder "Value:"
                , Attributes.value model.inputValue
                , Events.onInput SetValue
                ]
                []
            , Html.button
                [ Attributes.type_ "button"
                , Events.onClick <| SaveToLocalStorage model.inputKey model.inputValue
                ]
                [ Html.text "Save" ]
            , Html.button
                [ Attributes.type_ "button"
                , Events.onClick <| GetFromLocalStorage model.inputKey
                ]
                [ Html.text "Get" ]
            , Html.button
                [ Attributes.type_ "button"
                , Events.onClick <| RemoveFromLocalStorage model.inputKey
                ]
                [ Html.text "Remove" ]
            , Html.button
                [ Attributes.type_ "button"
                , Events.onClick ClearLocalStorage
                ]
                [ Html.text "Clear" ]
            ]
        , Html.div [] [ Html.p [] [ Html.text model.message ] ]
    ]
